/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package views;

import daoImpl.NhanVienDAO;
import entities.NhanVien;
import java.awt.CardLayout;
import utils.XAuth;
import javax.swing.JLabel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import utils.EntityController;
import utils.XMsgBox;

/**
 *
 * @author ndhlt
 */
public class PasswordChangeWindow extends EntityController<NhanVien> {

    private final NhanVienDAO dao = new NhanVienDAO();
    private String Curr;
    private String New;
    private String Confirm;

    /**
     * Creates new form PasswordChange
     */
    public PasswordChangeWindow() {
        initComponents();
        this.setTitle("Đổi mật khẩu");
        this.setLocationRelativeTo(null);
        txtPassword.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                Curr = new String(txtPassword.getPassword());
                clearError(currpassErr);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                Curr = new String(txtPassword.getPassword());
                clearError(currpassErr);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                Curr = new String(txtPassword.getPassword());
                clearError(currpassErr);
            }
        });
        txtConfirm.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                Confirm = new String(txtConfirm.getPassword());
                clearError(confirmErr);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                Confirm = new String(txtConfirm.getPassword());
                clearError(confirmErr);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                Confirm = new String(txtConfirm.getPassword());
                clearError(confirmErr);
            }
        });
        txtNewpass.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                New = new String(txtNewpass.getPassword());
                clearError(newpassErr);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                New = new String(txtNewpass.getPassword());
                clearError(newpassErr);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                New = new String(txtNewpass.getPassword());
                clearError(newpassErr);
            }
        });
    }

    private void clearError(JLabel label) {
        label.setText("");
    }
    
    private void changePass() {
        NhanVien temp = getEntity();
        if(temp != null){
            boolean result = XMsgBox.confirm(this, "Xác nhận đổi mật khẩu ?");
            if (result) {
                dao.update(temp);
                XMsgBox.inform(returnWindow, "Đổi mật khẩu thành công");
                XAuth.clear();
                this.dispose();
                returnWindow.dispose();
                new MainPageFrame(false).setVisible(true);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        currpassErr = new javax.swing.JLabel();
        confirmErr = new javax.swing.JLabel();
        newpassErr = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        btnshowCurr = new javax.swing.JToggleButton();
        txtNewpass = new javax.swing.JPasswordField();
        btnshowNew = new javax.swing.JToggleButton();
        txtConfirm = new javax.swing.JPasswordField();
        btnshowConfirm = new javax.swing.JToggleButton();
        btnChangePass = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Tên đăng nhập");

        txtUsername.setEditable(false);
        txtUsername.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtUsername.setEnabled(false);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setText("Mật khẩu hiện tại");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setText("Mật khẩu mới");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel4.setText("Xác nhận mật khẩu mới");

        currpassErr.setForeground(new java.awt.Color(255, 0, 0));

        confirmErr.setForeground(new java.awt.Color(255, 0, 0));

        newpassErr.setForeground(new java.awt.Color(255, 0, 0));

        txtPassword.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        btnshowCurr.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnshowCurr.setText("Hiện");
        btnshowCurr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnshowCurrActionPerformed(evt);
            }
        });

        txtNewpass.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        btnshowNew.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnshowNew.setText("Hiện");
        btnshowNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnshowNewActionPerformed(evt);
            }
        });

        txtConfirm.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        btnshowConfirm.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnshowConfirm.setText("Hiện");
        btnshowConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnshowConfirmActionPerformed(evt);
            }
        });

        btnChangePass.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnChangePass.setText("Đổi mật khẩu");
        btnChangePass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangePassActionPerformed(evt);
            }
        });

        btnCancel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnCancel.setText("Hủy bỏ");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtUsername, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(newpassErr, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE)
                            .addComponent(txtNewpass))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnshowNew, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(confirmErr, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 100, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(currpassErr, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE)
                                            .addComponent(txtConfirm)
                                            .addComponent(txtPassword))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnshowConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btnshowCurr, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jLabel4))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnChangePass, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnshowCurr))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(currpassErr, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnshowNew)
                            .addComponent(txtNewpass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnshowConfirm)
                        .addGap(1, 1, 1)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(newpassErr, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(confirmErr, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnChangePass)
                    .addComponent(btnCancel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnChangePassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangePassActionPerformed
        changePass();
    }//GEN-LAST:event_btnChangePassActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnshowCurrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnshowCurrActionPerformed
        if (btnshowCurr.isSelected()) {
            btnshowCurr.setText("Ẩn");
            txtPassword.setEchoChar('\u0000');
        } else {
            btnshowCurr.setText("Hiện");
            txtPassword.setEchoChar('*');
        }
    }//GEN-LAST:event_btnshowCurrActionPerformed

    private void btnshowNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnshowNewActionPerformed
        if (btnshowNew.isSelected()) {
            btnshowNew.setText("Ẩn");
            txtNewpass.setEchoChar('\u0000');
        } else {
            btnshowNew.setText("Hiện");
            txtNewpass.setEchoChar('*');
        }
    }//GEN-LAST:event_btnshowNewActionPerformed

    private void btnshowConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnshowConfirmActionPerformed

        if (btnshowConfirm.isSelected()) {
            btnshowConfirm.setText("Ẩn");
            txtConfirm.setEchoChar('\u0000');
        } else {
            btnshowConfirm.setText("Hiện");
            txtConfirm.setEchoChar('*');
        }
    }//GEN-LAST:event_btnshowConfirmActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

    }//GEN-LAST:event_formWindowClosing

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        returnWindow.setVisible(true);
    }//GEN-LAST:event_formWindowClosed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        setForm(XAuth.getUser());
    }//GEN-LAST:event_formWindowOpened

//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(PasswordChangeWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(PasswordChangeWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(PasswordChangeWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(PasswordChangeWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new WelcomeWindow().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnChangePass;
    private javax.swing.JToggleButton btnshowConfirm;
    private javax.swing.JToggleButton btnshowCurr;
    private javax.swing.JToggleButton btnshowNew;
    private javax.swing.JLabel confirmErr;
    private javax.swing.JLabel currpassErr;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel newpassErr;
    private javax.swing.JPasswordField txtConfirm;
    private javax.swing.JPasswordField txtNewpass;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setForm(NhanVien e) {
        txtUsername.setText(e.getMaNV());
    }

    @Override
    public NhanVien getEntity() {
        NhanVien temp = XAuth.getUser();
        if (checkInput()) {
            temp.setMatKhau(New);
            return temp;
            
        }
        return null;
    }

    @Override
    protected boolean checkInput() {
        NhanVien e = XAuth.getUser();
        if (!e.getMatKhau().equals(Curr)) {
            currpassErr.setText("Mật khẩu không đúng!!");
            txtPassword.requestFocus();
            return false;
        } else if (New.isBlank()) {
            newpassErr.setText("Mật khẩu mới không được để trống!!");
            txtNewpass.requestFocus();
            return false;
        } else if (New.equals(Curr)) {
            newpassErr.setText("Mật khẩu mới không được trùng với mật khẩu cũ!!");
            txtNewpass.requestFocus();
            return false;
        } else if (!New.equals(Confirm)) {
            confirmErr.setText("Mật khẩu không khớp, xin thử lại!!");
            txtConfirm.requestFocus();
            return false;
        } else {
            return true;
        }
    }
}
